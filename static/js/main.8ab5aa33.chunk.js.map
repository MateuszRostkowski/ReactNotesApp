{"version":3,"sources":["components/NoteContainer.tsx","helpers/getNotesList.tsx","components/SideBar.tsx","components/Error.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["options","mode","NoteContainer","noteId","useState","typingMode","setTypingMode","value","setValue","noteName","setNoteName","useEffect","rawNote","localStorage","getItem","JSON","parse","name","setItem","stringify","className","onClick","onBeforeChange","editor","data","source","escapeHtml","getNotesList","rawList","AddNote","toggleMode","push","useHistory","setName","href","e","preventDefault","onChange","target","list","newList","SideBar","addMode","setAddMode","notesList","setNotesList","showNotesList","setShowNotesList","map","item","index","key","to","Error","Home","isError","setIsError","useParams","document","title","length","some","App","path","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAQMA,EAAU,CACdC,KAAM,YAiEOC,EA9DmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACZC,mBAA6B,QADjB,mBACzCC,EADyC,KAC7BC,EAD6B,OAEtBF,mBAAS,IAFa,mBAEzCG,EAFyC,KAElCC,EAFkC,OAGhBJ,mBAAS,IAHO,mBAGzCK,EAHyC,KAG/BC,EAH+B,KAsBhD,OAjBAC,qBAAU,WACR,IAAMC,EAAUC,aAAaC,QAAQX,GAClCS,IACDF,EAAYK,KAAKC,MAAMJ,GAASK,MAChCT,EAASO,KAAKC,MAAMJ,GAASL,UAE9B,CAACJ,IAEJQ,qBAAU,WACLR,GAAUI,GACXM,aAAaK,QAAQf,EAAQY,KAAKI,UAAU,CAC1CF,KAAMR,EACNF,aAGH,CAACA,EAAOJ,EAAQM,IAGjB,yBAAKW,UAAU,kBACb,yBAAKA,UAAU,0BACb,4BACEA,UAAS,qBACQ,SAAff,EAAwB,sBAAwB,IAElDgB,QAAS,kBAAMf,EAAc,UAJ/B,QAQA,4BACEc,UAAS,qBACQ,YAAff,EAA2B,sBAAwB,IAErDgB,QAAS,kBAAMf,EAAc,aAJ/B,YASF,wBAAIc,UAAU,cAAcX,GACZ,SAAfJ,EACC,yBAAKe,UAAU,yBACb,kBAAC,aAAD,CACEb,MAAOA,EACPP,QAASA,EACTsB,eAAgB,SAACC,EAAQC,EAAMjB,GAC7BC,EAASD,OAKf,yBAAKa,UAAU,4BACb,kBAAC,IAAD,CAAeK,OAAQlB,EAAOmB,YAAY,O,QC1DrCC,EAPM,WACnB,IAAMC,EAAUf,aAAaC,QAHF,eAG4B,KAGvD,OAFaC,KAAKC,MAAMY,ICKpBC,EAA4B,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC3BC,EAASC,cAATD,KAD4C,EAE5B3B,mBAAS,IAFmB,mBAE7Ca,EAF6C,KAEvCgB,EAFuC,KAuBpD,OACE,yBAAKb,UAAU,qBACb,yBAAKA,UAAU,sBACb,uBACEc,KAAK,IACLb,QAAS,SAACc,GACRA,EAAEC,iBACFN,MAJJ,SASA,2BAAOvB,MAAOU,EAAMoB,SAAU,SAACF,GAAD,OAAOF,EAAQE,EAAEG,OAAO/B,UACtD,4BAAQc,QAhCQ,WACpB,GAAIJ,EAAJ,CAIA,IAAMsB,EAAOZ,IAIPa,EAAO,CAHiB,CAC5BvB,SAEW,mBAAgBsB,IAC7B1B,aAAaK,QAAQD,EAAMF,KAAKI,UAAU,CACxCF,OACAV,MAAO,MAETM,aAAaK,QD3BY,aC2BWH,KAAKI,UAAUqB,IACnDT,EAAK,IAAD,OAAKd,IACTa,SAdEA,MA8BE,iBAEF,yBAAKT,QAASS,EAAYV,UAAU,0BAgD3BqB,MA3Cf,WAAoB,IAAD,EACarC,oBAAS,GADtB,mBACVsC,EADU,KACDC,EADC,OAEiBvC,mBAAS,IAF1B,mBAEVwC,EAFU,KAECC,EAFD,OAGyBzC,oBAAS,GAHlC,mBAGV0C,EAHU,KAGKC,EAHL,KAKjBpC,qBAAU,WACR,IAAM4B,EAAOZ,IACbkB,EAAaN,KACZ,CAACG,IAGJ,IAAMZ,EAAa,kBAAMa,GAAYD,IACrC,OACE,oCACE,yBAAKtB,UAAU,iBAAiBC,QAAS,kBAAM0B,GAAkBD,KAC/D,0BAAM1B,UAAU,8BAChB,0BAAMA,UAAU,8BAChB,0BAAMA,UAAU,+BAElB,yBAAKA,UAAS,2BAAsB0B,EAAgB,6BAA+B,KACjF,uBACEZ,KAAK,IACLb,QAAS,SAACc,GACRA,EAAEC,iBACFN,MAJJ,oBASA,yCACA,yBAAKV,UAAU,mBACZwB,EAAUI,KAAI,SAACC,EAAoBC,GAClC,OACE,kBAAC,IAAD,CAAMC,IAAKD,EAAOE,GAAE,WAAMH,EAAKhC,OAASgC,EAAKhC,WAKpDyB,GAAW,kBAAC,EAAD,CAASZ,WAAYA,MChFxBuB,EARD,WACZ,OACE,yBAAKjC,UAAU,mBACX,4DCgCOkC,MA5Bf,WAAiB,IAAD,EACgBlD,oBAAS,GADzB,mBACPmD,EADO,KACEC,EADF,KAENrD,EAAWsD,cAAXtD,OACA4B,EAASC,cAATD,KAiBR,OAfApB,qBAAU,WACR+C,SAASC,MAAQxD,EACjB,IAAMoC,EAAOZ,KAETxB,GAAUoC,EAAKqB,OAAS,GAC1B7B,EAAK,IAAD,OAAKQ,EAAK,GAAGtB,OAGhBsB,EAAKsB,MAAK,SAACZ,GAAD,OAAwBA,EAAKhC,OAASd,KACjDqD,GAAW,GAEXA,GAAW,KAEZ,CAACrD,EAAQ4B,IAGV,yBAAKX,UAAU,kBACb,kBAAC,EAAD,MACEmC,EAA8C,kBAAC,EAAD,MAApC,kBAAC,EAAD,CAAepD,OAAQA,MCvB1B,SAAS2D,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,SAAU,kBAAC,EAAD,QACjC,kBAAC,IAAD,CAAOD,KAAK,KACV,kBAAC,EAAD,UCJQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yCCLNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFJ,SAASe,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8ab5aa33.chunk.js","sourcesContent":["import React, { FC, useState, useEffect } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport ReactMarkdown from \"react-markdown/with-html\";\n\ninterface Props {\n  noteId: string\n}\n\nconst options = {\n  mode: \"markdown\"\n};\n\nconst NoteContainer: FC<Props>  = ({ noteId }) => {\n  const [typingMode, setTypingMode] = useState<\"preview\" | \"edit\">(\"edit\");\n  const [value, setValue] = useState(\"\");\n  const [noteName, setNoteName] = useState(\"\")\n\n  useEffect(() => {\n    const rawNote = localStorage.getItem(noteId) \n    if(rawNote) {\n      setNoteName(JSON.parse(rawNote).name)\n      setValue(JSON.parse(rawNote).value);\n    }\n  }, [noteId])\n\n  useEffect(() => {\n    if(noteId && value) {\n      localStorage.setItem(noteId, JSON.stringify({\n        name: noteName,\n        value\n      }))\n    }\n  }, [value, noteId, noteName])\n  \n  return (\n    <div className=\"note-container\">\n      <div className=\"mode-buttons-container\">\n        <button\n          className={`mode-button${\n            typingMode === \"edit\" ? \" mode-button-active\" : \"\"\n          }`}\n          onClick={() => setTypingMode(\"edit\")}\n        >\n          Edit\n        </button>\n        <button\n          className={`mode-button${\n            typingMode === \"preview\" ? \" mode-button-active\" : \"\"\n          }`}\n          onClick={() => setTypingMode(\"preview\")}\n        >\n          Preview\n        </button>\n      </div>\n      <h1 className=\"note-title\">{noteName}</h1>\n      {typingMode === \"edit\" ? (\n        <div className=\"code-mirror-container\">\n          <CodeMirror\n            value={value}\n            options={options}\n            onBeforeChange={(editor, data, value) => {\n              setValue(value);\n            }}\n          />\n        </div>\n      ) : (\n        <div className=\"react-markdown-container\">\n          <ReactMarkdown source={value} escapeHtml={false} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default NoteContainer;\n","export const NOTE_LIST_KEY = \"note_lists\"\n\nconst getNotesList = () => {\n  const rawList = localStorage.getItem(NOTE_LIST_KEY) || \"[]\"\n  const list = JSON.parse(rawList)\n\n  return list\n}\n\nexport default getNotesList","import React, { FC, useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport getNotesList, { NOTE_LIST_KEY } from \"../helpers/getNotesList\";\nimport { ListNoteItem } from \"../helpers/interfaces\";\n\ninterface AddNoteProps {\n  toggleMode: () => void;\n}\n\nconst AddNote: FC<AddNoteProps> = ({ toggleMode }) => {\n  const { push } = useHistory()\n  const [name, setName] = useState(\"\")\n\n  const handleAddNote = () => {\n    if(!name) {\n      toggleMode()\n      return \n    }\n    const list = getNotesList()\n    const newNote: ListNoteItem = {\n      name\n    }\n    const newList = [newNote, ...list]\n    localStorage.setItem(name, JSON.stringify({\n      name,\n      value: \"\"\n    }))\n    localStorage.setItem(NOTE_LIST_KEY, JSON.stringify(newList))\n    push(`/${name}`)\n    toggleMode()\n  }\n\n  return (\n    <div className=\"add-note-wrappper\">\n      <div className=\"add-note-container\">\n        <a\n          href=\"/\"\n          onClick={(e) => {\n            e.preventDefault();\n            toggleMode();\n          }}\n        >\n          Close\n        </a>\n        <input value={name} onChange={(e) => setName(e.target.value)}/>\n        <button onClick={handleAddNote}>Add new note</button>\n      </div>\n      <div onClick={toggleMode} className=\"add-note-background\"></div>\n    </div>\n  );\n};\n\nfunction SideBar() {\n  const [addMode, setAddMode] = useState(false);\n  const [notesList, setNotesList] = useState([])\n  const [showNotesList, setShowNotesList] = useState(false);\n\n  useEffect(() => {\n    const list = getNotesList()\n    setNotesList(list)\n  }, [addMode])\n\n  \n  const toggleMode = () => setAddMode(!addMode);\n  return (\n    <>\n      <div className=\"sidebar-toggle\" onClick={() => setShowNotesList(!showNotesList)}>\n        <span className=\"burger-line burger-line-1\"></span>\n        <span className=\"burger-line burger-line-1\"></span>\n        <span className=\"burger-line burger-line-1\"></span>\n      </div>\n      <div className={`sidebar-container${showNotesList ? \" sidebar-container--hidden\" : \"\"}`}>\n        <a\n          href=\"/\"\n          onClick={(e) => {\n            e.preventDefault();\n            toggleMode();\n          }}\n        >\n          Dodaj listę\n        </a>\n        <h1>Notes app</h1>\n        <div className=\"links-container\">\n          {notesList.map((item: ListNoteItem, index: number) => {\n            return (\n              <Link key={index} to={`/${item.name}`}>{item.name}</Link>\n            )\n          })}\n        </div>\n      </div>\n      {addMode && <AddNote toggleMode={toggleMode} />}\n    </>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\n\nconst Error = () => {\n  return (\n    <div className=\"error-container\">\n        <h1>Nie znaleźono notatki</h1>\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { useEffect, useState, useLayoutEffect } from \"react\";\nimport NoteContainer from \"./components/NoteContainer\";\nimport SideBar from \"./components/SideBar\";\n\nimport { useParams, useHistory } from \"react-router-dom\";\nimport getNotesList from \"./helpers/getNotesList\";\nimport Error from \"./components/Error\";\nimport { ListNoteItem } from \"./helpers/interfaces\";\n\nfunction Home() {\n  const [isError, setIsError] = useState(false)\n  const { noteId } = useParams()\n  const { push } = useHistory()\n\n  useEffect(() => {\n    document.title = noteId\n    const list = getNotesList()\n    \n    if(!noteId && list.length > 0) {\n      push(`/${list[0].name}`)\n    }\n\n    if(list.some((item: ListNoteItem) => item.name === noteId)) {\n      setIsError(false)\n    } else {\n      setIsError(true)\n    }\n  }, [noteId, push])\n\n  return (\n    <div className=\"home-container\">\n      <SideBar />\n      {!isError ? <NoteContainer noteId={noteId} /> : <Error />}\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from \"./Home\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/:noteId\" children={<Home />} />\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/mode/xml/xml.js';\nimport 'codemirror/mode/markdown/markdown.js';\nimport 'codemirror/mode/javascript/javascript.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}