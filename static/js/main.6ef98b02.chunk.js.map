{"version":3,"sources":["components/CodeBlock.tsx","helpers/getNotesList.tsx","helpers/uuid.ts","contexts/NotesProvider.tsx","hooks/useNote.ts","hooks/useNotes.ts","components/Modal.tsx","components/NoteSettings.tsx","components/ToggleModeButton.tsx","components/NoteContainer.tsx","components/AddNote.tsx","components/SideBar.tsx","components/Error.tsx","components/Empty.tsx","screens/Home.tsx","screens/Routes.tsx","serviceWorker.ts","index.tsx","Cog_font_awesome.svg"],"names":["CodeBlock","value","language","getNotesList","rawList","localStorage","getItem","JSON","parse","uuidv4","replace","c","r","Math","random","toString","NotesContext","createContext","addNote","editNoteName","removeNote","notes","currentNote","NotesProvider","props","useState","setNotes","setCurrentNote","push","useHistory","readNotes","useCallback","newNotes","useEffect","setItem","stringify","checkIfNameIsAllowed","name","isNameTaken","some","note","toLowerCase","errorMessage","match","Error","callback","newList","id","noteId","filter","item","removeItem","map","rawNote","oldNote","alert","Provider","children","useNotes","useContext","modalRoot","document","getElementById","Modal","classList","add","remove","ReactDOM","createPortal","NoteSettings","showSettings","setShowSettings","useParams","setName","toggleMode","state","handleEditNote","e","handleDeleteNote","handleClose","preventDefault","handleKeyDown","keyCode","handleInputChange","target","className","onClick","src","Cog","alt","href","onChange","onKeyDown","ToggleModeButton","typingMode","mode","onToggleChange","onItemPress","generateKeySelection","cm","prefix","selection","getSelection","length","slice","replaceSelection","options","autofocus","extraKeys","WrapCheckBox","markdown","setMarkdown","sourcePosition","checked","type","lineIndex","start","line","lines","split","find","join","error","console","warn","modes","NoteContainer","setNote","locaStorageTypingMode","initialType","setTypingMode","noteName","setNoteName","handleCodeMirrorChange","editor","data","useNote","renderers","listItem","code","isPreviewMode","isBothMode","isEditMode","classNames","key","onBeforeChange","source","rawSourcePos","escapeHtml","AddNote","inputRef","useRef","current","focus","handleAddNote","handleInput","ref","SideBarNotesList","index","to","SideBar","addMode","setAddMode","showNotesList","setShowNotesList","sideBarRef","handleAddNoteClick","CSSTransition","in","timeout","Empty","shown","setShown","timeoutId","setTimeout","clearTimeout","Home","isError","setIsError","isEmpty","setIsEmpty","title","Routes","basename","path","Boolean","window","location","hostname","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.6ef98b02.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nimport Highlight from 'react-highlight.js';\n\ninterface Props {\n  value: string;\n  language: string;\n}\n\nconst CodeBlock: FC<Props> = ({ value, language }) => {\n  return <Highlight language={language}>{value}</Highlight>;\n};\n\nexport default CodeBlock;\n","export const NOTE_LIST_KEY = 'note_lists';\n\nconst getNotesList = () => {\n  const rawList = localStorage.getItem(NOTE_LIST_KEY) || '[]';\n  const list = JSON.parse(rawList);\n\n  return list;\n};\n\nexport default getNotesList;\n","function uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport default uuidv4;\n","import React, {\n  createContext,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\n\nimport { useHistory } from 'react-router-dom';\nimport { TYPING_MODE_KEY } from '../hooks/useNote';\nimport getNotesList, { NOTE_LIST_KEY } from '../helpers/getNotesList';\nimport { ListNoteItem } from '../helpers/interfaces';\nimport uuidv4 from '../helpers/uuid';\n\ninterface SingeNote {\n  id: string;\n  name: string;\n  value: string;\n}\n\ninterface NotesContext {\n  addNote: (name: string, callback: () => void) => void;\n  editNoteName: (noteId: string, name: string, callback: () => void) => void;\n  removeNote: (name: string) => void;\n  notes: ListNoteItem[];\n  currentNote: SingeNote | null;\n}\n\nexport const NotesContext = createContext<NotesContext>({\n  addNote: () => {},\n  editNoteName: () => {},\n  removeNote: () => {},\n  notes: [],\n  currentNote: null,\n});\n\ninterface Props {\n  children?: ReactNode;\n}\n\nexport function NotesProvider(props: Props) {\n  const [notes, setNotes] = useState<ListNoteItem[]>([]);\n  const [currentNote, setCurrentNote] = useState<SingeNote | null>(null);\n  const { push } = useHistory();\n\n  const readNotes = useCallback(() => {\n    const newNotes = getNotesList();\n    setNotes(newNotes);\n  }, []);\n\n  useEffect(() => {\n    readNotes();\n    setCurrentNote(null);\n  }, [readNotes]);\n\n  useEffect(() => {\n    localStorage.setItem(NOTE_LIST_KEY, JSON.stringify(notes));\n  }, [notes]);\n\n  const checkIfNameIsAllowed = useCallback(\n    (name: string) => {\n      const isNameTaken = notes.some(\n        note => note.name.toLowerCase() === name.toLowerCase(),\n      );\n\n      let errorMessage = null;\n      if (!name) {\n        errorMessage = 'Name can not be empty';\n      } else if (name === NOTE_LIST_KEY || name === TYPING_MODE_KEY) {\n        errorMessage = 'This name is not allowed';\n      } else if (isNameTaken) {\n        errorMessage = 'This name is already taken';\n      } else if (name.match(/[#/]/)) {\n        errorMessage = \"You can't use # or / characters\";\n      }\n      if (errorMessage) {\n        throw new Error(errorMessage);\n      }\n\n      return;\n    },\n    [notes],\n  );\n\n  const addNote = useCallback(\n    (name, callback) => {\n      checkIfNameIsAllowed(name);\n\n      const newNote: ListNoteItem = {\n        name,\n        id: uuidv4(),\n      };\n      const newList = [newNote, ...notes];\n      setNotes(newList);\n      localStorage.setItem(\n        name,\n        JSON.stringify({\n          name,\n          value: '',\n        }),\n      );\n      push(`/note/${name}`);\n      callback();\n    },\n    [notes, checkIfNameIsAllowed, push],\n  );\n\n  const removeNote = useCallback(\n    (noteId: string) => {\n      const newNotes = notes.filter(\n        (item: ListNoteItem) => item.name !== noteId,\n      );\n      setNotes(newNotes);\n\n      push(`/note/${newNotes[0]?.name ?? ''}`);\n      localStorage.removeItem(noteId);\n    },\n    [notes, push],\n  );\n\n  const editNoteName = useCallback(\n    (noteId: string, name: string, callback: () => void) => {\n      checkIfNameIsAllowed(name);\n      if (name === NOTE_LIST_KEY || name === TYPING_MODE_KEY) {\n        alert('this name is not allowed');\n        return;\n      }\n\n      const newNotes = notes.map(item => {\n        if (item.name === noteId) {\n          return { ...item, name };\n        }\n        return item;\n      });\n      const rawNote = localStorage.getItem(noteId);\n\n      if (rawNote) {\n        const oldNote = JSON.parse(rawNote);\n        const value = JSON.stringify({\n          name,\n          value: oldNote?.value,\n        });\n\n        localStorage.setItem(name, value);\n        setNotes(newNotes);\n        localStorage.setItem(NOTE_LIST_KEY, JSON.stringify(newNotes));\n        callback();\n      }\n      push(`/note/${name}`);\n      localStorage.removeItem(noteId);\n    },\n    [checkIfNameIsAllowed, notes, push],\n  );\n\n  return (\n    <NotesContext.Provider\n      value={{\n        addNote,\n        editNoteName,\n        removeNote,\n        notes,\n        currentNote,\n      }}>\n      {props.children}\n    </NotesContext.Provider>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { NotesParams } from '../screens/Routes';\nimport { modes } from '../components/NoteContainer';\n\nexport const TYPING_MODE_KEY = 'typing_mode';\n\nexport const useNote = () => {\n  const [note, setNote] = useState<string>('');\n  const { noteId } = useParams<NotesParams>();\n\n  const locaStorageTypingMode = localStorage.getItem(TYPING_MODE_KEY);\n  const initialType =\n    locaStorageTypingMode === 'preview'\n      ? 'preview'\n      : locaStorageTypingMode === 'edit'\n      ? 'edit'\n      : 'both';\n\n  const [typingMode, setTypingMode] = useState<modes>(initialType);\n  const [noteName, setNoteName] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem(TYPING_MODE_KEY, typingMode);\n  }, [typingMode]);\n\n  useEffect(() => {\n    const rawNote = localStorage.getItem(noteId);\n    if (rawNote) {\n      setNoteName(JSON.parse(rawNote).name);\n      setNote(JSON.parse(rawNote).value);\n    }\n  }, [noteId, setNote]);\n\n  useEffect(() => {\n    if (noteId && note) {\n      localStorage.setItem(\n        noteId,\n        JSON.stringify({\n          name: noteName,\n          value: note,\n        }),\n      );\n    }\n  }, [note, noteId, noteName]);\n\n  const handleCodeMirrorChange = useCallback(\n    (editor, data, value) => {\n      setNote(value);\n    },\n    [setNote],\n  );\n\n  return {\n    note,\n    setNote,\n    noteName,\n    typingMode,\n    setTypingMode,\n    handleCodeMirrorChange,\n  };\n};\n","import { useContext } from 'react';\nimport { NotesContext } from '../contexts/NotesProvider';\n\nexport const useNotes = () => useContext(NotesContext);\n","import { FC, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst modalRoot = document.getElementById('modal-root') as HTMLElement;\n\nexport type ModalProps = {\n  children: React.ReactNode;\n};\n\nexport const Modal: FC<ModalProps> = ({ children }) => {\n  useEffect(() => {\n    modalRoot.classList.add('shown');\n\n    return () => {\n      modalRoot.classList.remove('shown');\n    };\n  }, []);\n\n  return ReactDOM.createPortal(children, modalRoot);\n};\n","import React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Cog from '../Cog_font_awesome.svg';\nimport { useNotes } from '../hooks/useNotes';\nimport { NotesParams } from '../screens/Routes';\nimport { Modal } from './Modal';\n\nconst NoteSettings: FC = () => {\n  const [showSettings, setShowSettings] = useState(false);\n  const { noteId } = useParams<NotesParams>();\n  const [name, setName] = useState(noteId);\n  const { editNoteName, removeNote } = useNotes();\n\n  useEffect(() => {\n    setName(noteId);\n  }, [noteId]);\n\n  const toggleMode = useCallback(() => {\n    setShowSettings(state => !state);\n  }, []);\n\n  const handleEditNote = useCallback(() => {\n    try {\n      editNoteName(noteId, name, toggleMode);\n    } catch (e) {\n      alert(e);\n    }\n  }, [editNoteName, name, noteId, toggleMode]);\n\n  const handleDeleteNote = useCallback(() => {\n    removeNote(noteId);\n  }, [noteId, removeNote]);\n\n  const handleClose = useCallback(\n    e => {\n      e.preventDefault();\n      toggleMode();\n    },\n    [toggleMode],\n  );\n\n  const handleKeyDown = useCallback(\n    e => {\n      if (e.keyCode === 13) {\n        handleEditNote();\n      }\n    },\n    [handleEditNote],\n  );\n\n  const handleInputChange = useCallback(e => setName(e.target.value), []);\n\n  return (\n    <>\n      <div className=\"note-settings\" onClick={toggleMode}>\n        <img src={Cog} alt=\"React Logo\" className=\"cog-icon\" />\n      </div>\n      {showSettings && (\n        <Modal>\n          <div className=\"add-note-wrappper\">\n            <div className=\"add-note-container\">\n              <a href=\"/\" onClick={handleClose}>\n                Close\n              </a>\n              <input\n                value={name}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyDown}\n              />\n              <div className=\"mb\">\n                <button className=\"button\" onClick={handleEditNote}>\n                  Edit note name\n                </button>\n              </div>\n              <button\n                className=\"button button-danger\"\n                onClick={handleDeleteNote}>\n                Delete note\n              </button>\n            </div>\n            <div onClick={toggleMode} className=\"add-note-background\"></div>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default NoteSettings;\n","import React, { FC, useCallback } from 'react';\nimport { modes } from './NoteContainer';\n\ninterface Props {\n  typingMode: modes;\n  mode: modes;\n  onToggleChange: (mode: modes) => void;\n}\n\nconst ToggleModeButton: FC<Props> = ({ typingMode, mode, onToggleChange }) => {\n  const onItemPress = useCallback(() => onToggleChange(mode), [\n    onToggleChange,\n    mode,\n  ]);\n  return (\n    <button\n      className={`mode-button${\n        typingMode === mode ? ' mode-button-active' : ''\n      }`}\n      onClick={onItemPress}>\n      {mode}\n    </button>\n  );\n};\n\nexport default ToggleModeButton;\n","import React from 'react';\nimport { Controlled as CodeMirror } from 'react-codemirror2';\nimport ReactMarkdown from 'react-markdown/with-html';\nimport classNames from 'classnames';\n\nimport CodeBlock from './CodeBlock';\nimport NoteSettings from './NoteSettings';\nimport ToggleModeButton from './ToggleModeButton';\nimport { useNote } from '../hooks/useNote';\n\nconst generateKeySelection = (cm: any, prefix: string) => {\n  const selection = cm.getSelection();\n\n  if (selection.length > 0) {\n    const match =\n      `${selection.slice(0, 2)}${selection.slice(-2)}` === prefix + prefix;\n    if (match) {\n      cm.replaceSelection(`${selection.slice(2).slice(0, -2)}`);\n    } else {\n      cm.replaceSelection(`${prefix}${selection}${prefix}`);\n    }\n  }\n};\n\nconst options = {\n  mode: 'markdown',\n  autofocus: true,\n  extraKeys: {\n    'Cmd-B': (cm: any) => generateKeySelection(cm, '**'),\n    'Cmd-I': (cm: any) => generateKeySelection(cm, '*'),\n  },\n};\n\nconst markdownChecked = '- [x]';\nconst markdownUnchecked = '- [ ]';\n\nconst WrapCheckBox = (props: any) => {\n  const { markdown, setMarkdown, sourcePosition, checked, children } = props;\n  const flipCheckBox = () => {\n    try {\n      const lineIndex = sourcePosition.start.line - 1;\n      const lines = markdown.split('\\n');\n      const find = checked ? markdownChecked : markdownUnchecked;\n      const replace = checked ? markdownUnchecked : markdownChecked;\n\n      lines[lineIndex] = lines[lineIndex].replace(find, replace);\n      setMarkdown(lines.join('\\n'));\n    } catch (error) {\n      console.warn('Error while filpin checkbox: ', error);\n    }\n  };\n  return (\n    <li>\n      <input type=\"checkbox\" checked={checked} onChange={flipCheckBox} />\n      {children}\n    </li>\n  );\n};\n\nconst modes = ['edit', 'preview', 'both'] as const;\nexport type modes = typeof modes[number];\n\nconst NoteContainer = () => {\n  const {\n    note,\n    setNote,\n    noteName,\n    typingMode,\n    setTypingMode,\n    handleCodeMirrorChange,\n  } = useNote();\n\n  const renderers = {\n    listItem: (props: any): any => {\n      const { children } = props;\n      if (typeof props.checked === 'boolean') {\n        const { checked, sourcePosition } = props;\n        return (\n          <WrapCheckBox\n            markdown={note}\n            setMarkdown={setNote}\n            checked={checked}\n            sourcePosition={sourcePosition}>\n            {children}\n          </WrapCheckBox>\n        );\n      }\n      return <li>{children}</li>;\n    },\n    code: CodeBlock,\n  };\n\n  const isPreviewMode = typingMode === 'preview';\n  const isBothMode = typingMode === 'both';\n  const isEditMode = typingMode === 'edit';\n\n  return (\n    <div className=\"note\">\n      <NoteSettings />\n      <div\n        className={classNames('note-wrapper', {\n          'note-wrapper--both': isBothMode,\n        })}>\n        <div className=\"mode-buttons-container\">\n          {modes.map(mode => (\n            <ToggleModeButton\n              key={mode}\n              mode={mode}\n              typingMode={typingMode}\n              onToggleChange={setTypingMode}\n            />\n          ))}\n        </div>\n        <h1 className=\"note-title\">{noteName}</h1>\n        <div className=\"note-container\">\n          {(isEditMode || isBothMode) && (\n            <div className=\"code-mirror-container\">\n              <CodeMirror\n                value={note}\n                options={options}\n                onBeforeChange={handleCodeMirrorChange}\n              />\n            </div>\n          )}\n          {(isPreviewMode || isBothMode) && (\n            <div className=\"react-markdown-container markdown-body\">\n              <ReactMarkdown\n                renderers={renderers}\n                source={note}\n                rawSourcePos\n                escapeHtml={false}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NoteContainer;\n","import React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport { Modal } from './Modal';\nimport { useNotes } from '../hooks/useNotes';\n\ninterface AddNoteProps {\n  toggleMode: () => void;\n}\n\nconst AddNote: FC<AddNoteProps> = ({ toggleMode }) => {\n  const [name, setName] = useState('');\n  const inputRef = useRef<HTMLInputElement | null>();\n  const { addNote } = useNotes();\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const handleAddNote = useCallback(() => {\n    try {\n      addNote(name, toggleMode);\n    } catch (e) {\n      alert(e);\n    }\n  }, [addNote, name, toggleMode]);\n\n  const handleClose = useCallback(\n    e => {\n      e.preventDefault();\n      toggleMode();\n    },\n    [toggleMode],\n  );\n\n  const handleInput = useCallback(e => {\n    setName(e.target.value);\n  }, []);\n\n  const handleKeyDown = useCallback(\n    e => {\n      if (e.keyCode === 13) {\n        handleAddNote();\n      }\n    },\n    [handleAddNote],\n  );\n\n  return (\n    <Modal>\n      <div className=\"add-note-wrappper\">\n        <div className=\"add-note-container\">\n          <a href=\"/\" onClick={handleClose}>\n            Close\n          </a>\n          <input\n            ref={ref => (inputRef.current = ref)}\n            value={name}\n            onChange={handleInput}\n            onKeyDown={handleKeyDown}\n          />\n          <button className=\"button\" onClick={handleAddNote}>\n            Add new note\n          </button>\n        </div>\n        <div onClick={toggleMode} className=\"add-note-background\"></div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default AddNote;\n","import React, { useState, useRef, useCallback } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { ListNoteItem } from '../helpers/interfaces';\nimport AddNote from './AddNote';\nimport { CSSTransition } from 'react-transition-group';\nimport { useNotes } from '../hooks/useNotes';\nimport { NotesParams } from '../screens/Routes';\n\nconst SideBarNotesList = () => {\n  const { notes } = useNotes();\n  const { noteId } = useParams<NotesParams>();\n\n  return (\n    <div className=\"links-container\">\n      {notes.map((item: ListNoteItem, index: number) => {\n        return (\n          <Link\n            key={index}\n            to={`/note/${item.name}`}\n            className={noteId === item.name ? 'active-item' : ''}>\n            {item.name}\n          </Link>\n        );\n      })}\n    </div>\n  );\n};\n\nfunction SideBar() {\n  const [addMode, setAddMode] = useState(false);\n  const [showNotesList, setShowNotesList] = useState(false);\n  const sideBarRef = useRef<HTMLDivElement | null>(null);\n\n  const toggleMode = useCallback(() => {\n    setAddMode(state => !state);\n  }, []);\n\n  const handleAddNoteClick = useCallback(\n    e => {\n      e.preventDefault();\n      toggleMode();\n    },\n    [toggleMode],\n  );\n\n  return (\n    <>\n      <div\n        className={classNames('sidebar-toggle', {\n          'sidebar-toggle--opened': showNotesList,\n        })}\n        onClick={() => setShowNotesList(!showNotesList)}>\n        <span className=\"burger-line burger-line-1\"></span>\n        <span className=\"burger-line burger-line-1\"></span>\n        <span className=\"burger-line burger-line-1\"></span>\n      </div>\n      <CSSTransition\n        in={showNotesList}\n        timeout={200}\n        classNames=\"sidebar-wrapper\">\n        <div\n          className=\"sidebar-wrapper\"\n          ref={ref => (sideBarRef.current = ref)}>\n          <div className=\"sidebar-container\">\n            <h1>Notes app</h1>\n            <a href=\"/\" onClick={handleAddNoteClick}>\n              Add note\n            </a>\n            <SideBarNotesList />\n          </div>\n        </div>\n      </CSSTransition>\n      {addMode && <AddNote toggleMode={toggleMode} />}\n    </>\n  );\n}\n\nexport default SideBar;\n","import React from 'react';\n\nconst Error = () => {\n  return (\n    <div className=\"error-container\">\n      <h1>This note wasn't found</h1>\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\n\nconst Empty = () => {\n  const [shown, setShown] = useState(false);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setShown(true);\n    }, 1000);\n    return clearTimeout(timeoutId);\n  }, []);\n\n  return (\n    <div className=\"empty-container\">\n      <h1>You don't have any note</h1>\n      <p\n        className={classNames('add-new-info', {\n          'add-new-info--shown': shown,\n        })}>\n        ← Click here to add one\n      </p>\n    </div>\n  );\n};\n\nexport default Empty;\n","import React, { useEffect, useState } from 'react';\nimport NoteContainer from '../components/NoteContainer';\nimport SideBar from '../components/SideBar';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Error from '../components/Error';\nimport { ListNoteItem } from '../helpers/interfaces';\nimport Empty from '../components/Empty';\nimport { useNotes } from '../hooks/useNotes';\nimport { NotesParams } from './Routes';\n\nfunction Home() {\n  const [isError, setIsError] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(false);\n\n  const { noteId } = useParams<NotesParams>();\n  const { notes } = useNotes();\n  const { push } = useHistory();\n\n  useEffect(() => {\n    document.title = noteId || 'notes';\n\n    if (!notes || notes.length === 0) {\n      setIsEmpty(true);\n    } else {\n      setIsEmpty(false);\n      if (!noteId && notes.length > 0) {\n        push(`/note/${notes[0].name}`);\n      }\n\n      if (notes.some((item: ListNoteItem) => item.name === noteId)) {\n        setIsError(false);\n      } else {\n        setIsError(true);\n      }\n    }\n  }, [noteId, notes, push]);\n\n  return (\n    <div className=\"home-container\">\n      <SideBar />\n      {!isError && !isEmpty && <NoteContainer key={noteId} />}\n      {!isError && isEmpty && <Empty />}\n      {isError && !isEmpty && <Error />}\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './Home';\nimport { NotesProvider } from '../contexts/NotesProvider';\n\nexport interface NotesParams {\n  noteId: string;\n}\n\nexport default function Routes() {\n  return (\n    <Router basename=\"/\">\n      <div>\n        <NotesProvider>\n          <Switch>\n            <Route path=\"/note/:noteId\" children={<Home />} />\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </NotesProvider>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/gh-markdown.css';\nimport Routes from './screens/Routes';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/mode/xml/xml.js';\nimport 'codemirror/mode/markdown/markdown.js';\nimport 'codemirror/mode/javascript/javascript.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Cog_font_awesome.69de4447.svg\";"],"sourceRoot":""}