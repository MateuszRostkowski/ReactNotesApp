{"version":3,"sources":["components/CodeBlock.tsx","components/NoteContainer.tsx","helpers/getNotesList.tsx","components/Modal.tsx","components/AddNote.tsx","components/SideBar.tsx","components/Error.tsx","components/Empty.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CodeBlock","value","language","options","mode","autofocus","NoteContainer","noteId","locaStorageTypingMode","localStorage","getItem","initialType","useState","typingMode","setTypingMode","setValue","noteName","setNoteName","useEffect","setItem","rawNote","JSON","parse","name","stringify","className","onClick","onBeforeChange","editor","data","renderers","code","source","escapeHtml","getNotesList","rawList","modalRoot","document","getElementById","Modal","children","classList","add","remove","ReactDOM","createPortal","AddNote","toggleMode","push","useHistory","setName","href","e","preventDefault","onChange","target","list","newList","alert","SideBar","addMode","setAddMode","notesList","setNotesList","showNotesList","setShowNotesList","useParams","CSSTransition","in","timeout","classNames","map","item","index","key","to","Error","Empty","shown","setShown","setTimeout","Home","isError","setIsError","isEmpty","setIsEmpty","title","length","some","App","basename","path","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAaeA,EAJc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACrC,OAAO,kBAAC,IAAD,CAAWA,SAAUA,GAAWD,ICCnCE,EAAU,CACdC,KAAM,WACNC,WAAW,GAmGEC,EAhGkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5BC,EAAwBC,aAAaC,QAZd,eAavBC,EACsB,YAA1BH,EACI,UAC0B,SAA1BA,EACA,OACA,OAPyC,EASXI,mBAClCD,GAV6C,mBASxCE,EATwC,KAS5BC,EAT4B,OAYrBF,mBAAS,IAZY,mBAYxCX,EAZwC,KAYjCc,EAZiC,OAafH,mBAAS,IAbM,mBAaxCI,EAbwC,KAa9BC,EAb8B,KAuC/C,OAxBAC,qBAAU,WACRT,aAAaU,QA3Bc,cA2BWN,KACrC,CAACA,IAEJK,qBAAU,WACR,IAAME,EAAUX,aAAaC,QAAQH,GACjCa,IACFH,EAAYI,KAAKC,MAAMF,GAASG,MAChCR,EAASM,KAAKC,MAAMF,GAASnB,UAE9B,CAACM,IAEJW,qBAAU,WACJX,GAAUN,GACZQ,aAAaU,QACXZ,EACAc,KAAKG,UAAU,CACbD,KAAMP,EACNf,aAIL,CAACA,EAAOM,EAAQS,IAGjB,yBAAKS,UAAU,QACb,yBACEA,UAAS,sBACQ,SAAfZ,EAAwB,sBAAwB,KAGlD,yBAAKY,UAAU,0BACb,4BACEA,UAAS,qBACQ,SAAfZ,EAAwB,sBAAwB,IAElDa,QAAS,kBAAMZ,EAAc,UAJ/B,QAQA,4BACEW,UAAS,qBACQ,YAAfZ,EAA2B,sBAAwB,IAErDa,QAAS,kBAAMZ,EAAc,aAJ/B,WAQA,4BACEW,UAAS,qBACQ,SAAfZ,EAAwB,sBAAwB,IAElDa,QAAS,kBAAMZ,EAAc,UAJ/B,SASF,wBAAIW,UAAU,cAAcT,GAC5B,yBAAKS,UAAU,mBACI,SAAfZ,GAAwC,SAAfA,IACzB,yBAAKY,UAAU,yBACb,kBAAC,aAAD,CACExB,MAAOA,EACPE,QAASA,EACTwB,eAAgB,SAACC,EAAQC,EAAM5B,GAC7Bc,EAASd,QAKA,YAAfY,GAA2C,SAAfA,IAC5B,yBAAKY,UAAU,0CACb,kBAAC,IAAD,CAAeK,UAAW,CAAEC,KAAM/B,GAAagC,OAAQ/B,EAAOgC,YAAY,SC9FzEC,EAPM,WACnB,IAAMC,EAAU1B,aAAaC,QAHF,eAG4B,KAGvD,OAFaW,KAAKC,MAAMa,I,QCDpBC,EAAYC,SAASC,eAAe,cAM7BC,EAAwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAStC,OARAtB,qBAAU,WAGR,OAFAkB,EAAUK,UAAUC,IAAI,SAEjB,WACLN,EAAUK,UAAUE,OAAO,YAE5B,IAEIC,IAASC,aACdL,EACAJ,ICyCWU,EAlDmB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC3BC,EAASC,cAATD,KAD4C,EAE5BpC,mBAAS,IAFmB,mBAE7CW,EAF6C,KAEvC2B,EAFuC,KA4BpD,OACE,kBAAC,EAAD,KACE,yBAAKzB,UAAU,qBACb,yBAAKA,UAAU,sBACb,uBACE0B,KAAK,IACLzB,QAAS,SAAC0B,GACRA,EAAEC,iBACFN,MAJJ,SASA,2BAAO9C,MAAOsB,EAAM+B,SAAU,SAACF,GAAD,OAAOF,EAAQE,EAAEG,OAAOtD,UACtD,4BAAQyB,QAtCM,WACpB,GAAIH,EAKJ,GFrByB,eEqBtBA,GHhBwB,gBGgBEA,EAA7B,CAIA,IAAMiC,EAAOtB,IAIPuB,EAAO,CAHiB,CAC5BlC,SAEW,mBAAgBiC,IAC7B/C,aAAaU,QAAQI,EAAMF,KAAKG,UAAU,CACxCD,OACAtB,MAAO,MAETQ,aAAaU,QFlCY,aEkCWE,KAAKG,UAAUiC,IACnDT,EAAK,IAAD,OAAKzB,IACTwB,SAdEW,MAAM,iCALNX,MAoCI,iBAEF,yBAAKrB,QAASqB,EAAYtB,UAAU,2B,SCW7BkC,MA3Df,WAAoB,IAAD,EACa/C,oBAAS,GADtB,mBACVgD,EADU,KACDC,EADC,OAEiBjD,mBAAS,IAF1B,mBAEVkD,EAFU,KAECC,EAFD,OAGyBnD,oBAAS,GAHlC,mBAGVoD,EAHU,KAGKC,EAHL,KAIT1D,EAAW2D,cAAX3D,OACRW,qBAAU,WACR,IAAMsC,EAAOtB,IACb6B,EAAaP,KACZ,CAACI,IAEJ,IAAMb,EAAa,kBAAMc,GAAYD,IACrC,OACE,oCACE,yBACEnC,UAAU,iBACVC,QAAS,kBAAMuC,GAAkBD,KAEjC,0BAAMvC,UAAU,8BAChB,0BAAMA,UAAU,8BAChB,0BAAMA,UAAU,+BAElB,kBAAC0C,EAAA,EAAD,CACEC,GAAIJ,EACJK,QAAS,IACTC,WAAW,mBAEX,yBAAK7C,UAAU,mBACb,yBAAKA,UAAU,qBACb,yCACA,uBACE0B,KAAK,IACLzB,QAAS,SAAC0B,GACRA,EAAEC,iBACFN,MAJJ,YASA,yBAAKtB,UAAU,mBACZqC,EAAUS,KAAI,SAACC,EAAoBC,GAClC,OACE,kBAAC,IAAD,CACEC,IAAKD,EACLE,GAAE,WAAMH,EAAKjD,MACbE,UAAWlB,IAAWiE,EAAKjD,KAAO,cAAgB,IAEjDiD,EAAKjD,aAQnBqC,GAAW,kBAAC,EAAD,CAASb,WAAYA,MCnDxB6B,EARD,WACZ,OACE,yBAAKnD,UAAU,mBACX,4DCcOoD,EAjBD,WAAO,IAAD,EACQjE,oBAAS,GADjB,mBACXkE,EADW,KACJC,EADI,KASlB,OANA7D,qBAAU,WACR8D,YAAW,WACTD,GAAS,KACR,OACF,IAGD,yBAAKtD,UAAU,mBACX,oEACA,uBAAGA,UAAS,sBAAiBqD,EAAQ,uBAAyB,KAA9D,qECgCOG,MApCf,WAAiB,IAAD,EACgBrE,oBAAS,GADzB,mBACPsE,EADO,KACEC,EADF,OAEgBvE,oBAAS,GAFzB,mBAEPwE,EAFO,KAEEC,EAFF,KAGN9E,EAAW2D,cAAX3D,OACAyC,EAASC,cAATD,KAsBR,OApBA9B,qBAAU,WACRmB,SAASiD,MAAQ/E,GAAU,QAC3B,IAAMiD,EAAOtB,IAETsB,GAAwB,IAAhBA,EAAK+B,QAGfF,GAAW,IACP9E,GAAUiD,EAAK+B,OAAS,GAC1BvC,EAAK,IAAD,OAAKQ,EAAK,GAAGjC,OAGhBiC,EAAKgC,MAAK,SAAChB,GAAD,OAAwBA,EAAKjD,OAAShB,KACjD4E,GAAW,GAEXA,GAAW,IAVbE,GAAW,KAaZ,CAAC9E,EAAQyC,IAGV,yBAAKvB,UAAU,kBACb,kBAAC,EAAD,OACEyD,IAAYE,GAAW,kBAAC,EAAD,CAAeV,IAAKnE,EAAQA,OAAQA,KAC3D2E,GAAWE,GAAW,kBAAC,EAAD,MACvBF,IAAYE,GAAW,kBAAC,EAAD,QCjCf,SAASK,IACtB,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWnD,SAAU,kBAAC,EAAD,QACjC,kBAAC,IAAD,CAAOmD,KAAK,KACV,kBAAC,EAAD,UCHQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yCCJNpD,IAASqD,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACT,EAAD,OAEFpD,SAASC,eAAe,SDyHpB,kBAAmB6D,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.47bc6b5b.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport Highlight from \"react-highlight.js\";\n\ninterface Props {\n  value: string;\n  language: string;\n}\n\nconst CodeBlock: FC<Props> = ({ value, language }) => {\n  return <Highlight language={language}>{value}</Highlight>;\n};\n\nexport default CodeBlock;\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport ReactMarkdown from \"react-markdown/with-html\";\nimport CodeBlock from \"./CodeBlock\";\n\nexport const TYPING_MODE_KEY = \"typing_mode\";\n\ninterface Props {\n  noteId: string;\n}\n\nconst options = {\n  mode: \"markdown\",\n  autofocus: true,\n};\n\nconst NoteContainer: FC<Props> = ({ noteId }) => {\n  const locaStorageTypingMode = localStorage.getItem(TYPING_MODE_KEY);\n  const initialType =\n    locaStorageTypingMode === \"preview\"\n      ? \"preview\"\n      : locaStorageTypingMode === \"edit\"\n      ? \"edit\"\n      : \"both\";\n\n  const [typingMode, setTypingMode] = useState<\"preview\" | \"edit\" | \"both\">(\n    initialType\n  );\n  const [value, setValue] = useState(\"\");\n  const [noteName, setNoteName] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(TYPING_MODE_KEY, typingMode);\n  }, [typingMode]);\n\n  useEffect(() => {\n    const rawNote = localStorage.getItem(noteId);\n    if (rawNote) {\n      setNoteName(JSON.parse(rawNote).name);\n      setValue(JSON.parse(rawNote).value);\n    }\n  }, [noteId]);\n\n  useEffect(() => {\n    if (noteId && value) {\n      localStorage.setItem(\n        noteId,\n        JSON.stringify({\n          name: noteName,\n          value,\n        })\n      );\n    }\n  }, [value, noteId, noteName]);\n\n  return (\n    <div className=\"note\">\n      <div\n        className={`note-wrapper${\n          typingMode === \"both\" ? \" note-wrapper--both\" : \"\"\n        }`}\n      >\n        <div className=\"mode-buttons-container\">\n          <button\n            className={`mode-button${\n              typingMode === \"edit\" ? \" mode-button-active\" : \"\"\n            }`}\n            onClick={() => setTypingMode(\"edit\")}\n          >\n            Edit\n          </button>\n          <button\n            className={`mode-button${\n              typingMode === \"preview\" ? \" mode-button-active\" : \"\"\n            }`}\n            onClick={() => setTypingMode(\"preview\")}\n          >\n            Preview\n          </button>\n          <button\n            className={`mode-button${\n              typingMode === \"both\" ? \" mode-button-active\" : \"\"\n            }`}\n            onClick={() => setTypingMode(\"both\")}\n          >\n            Both\n          </button>\n        </div>\n        <h1 className=\"note-title\">{noteName}</h1>\n        <div className=\"note-container\">\n          {(typingMode === \"edit\" || typingMode === \"both\") && (\n            <div className=\"code-mirror-container\">\n              <CodeMirror\n                value={value}\n                options={options}\n                onBeforeChange={(editor, data, value) => {\n                  setValue(value);\n                }}\n              />\n            </div>\n          )}\n          {(typingMode === \"preview\" || typingMode === \"both\") && (\n            <div className=\"react-markdown-container markdown-body\">\n              <ReactMarkdown renderers={{ code: CodeBlock }} source={value} escapeHtml={false} />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NoteContainer;\n","export const NOTE_LIST_KEY = \"note_lists\"\n\nconst getNotesList = () => {\n  const rawList = localStorage.getItem(NOTE_LIST_KEY) || \"[]\"\n  const list = JSON.parse(rawList)\n\n  return list\n}\n\nexport default getNotesList","import { FC, useEffect } from 'react'\nimport ReactDOM from 'react-dom';\n\nconst modalRoot = document.getElementById(\"modal-root\") as HTMLElement;\n\nexport type ModalProps = {\n  children: React.ReactNode;\n};\n\nexport const Modal: FC<ModalProps> = ({ children }) => {\n  useEffect(() => {\n    modalRoot.classList.add(\"shown\")\n\n    return () => {\n      modalRoot.classList.remove(\"shown\")\n    }\n  }, [])\n\n  return ReactDOM.createPortal(\n    children,\n    modalRoot\n  )\n}","import React, { FC, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport getNotesList, { NOTE_LIST_KEY } from \"../helpers/getNotesList\";\nimport { ListNoteItem } from \"../helpers/interfaces\";\nimport { TYPING_MODE_KEY } from \"./NoteContainer\";\nimport { Modal } from \"./Modal\";\n\ninterface AddNoteProps {\n  toggleMode: () => void;\n}\n\nconst AddNote: FC<AddNoteProps> = ({ toggleMode }) => {\n  const { push } = useHistory()\n  const [name, setName] = useState(\"\")\n\n  const handleAddNote = () => {\n    if(!name) {\n      toggleMode()\n      return \n    }\n\n    if(name === NOTE_LIST_KEY || name === TYPING_MODE_KEY) {\n      alert(\"this name is not allowed\")\n      return\n    }\n    const list = getNotesList()\n    const newNote: ListNoteItem = {\n      name\n    }\n    const newList = [newNote, ...list]\n    localStorage.setItem(name, JSON.stringify({\n      name,\n      value: \"\"\n    }))\n    localStorage.setItem(NOTE_LIST_KEY, JSON.stringify(newList))\n    push(`/${name}`)\n    toggleMode()\n  }\n\n  return (\n    <Modal>\n      <div className=\"add-note-wrappper\">\n        <div className=\"add-note-container\">\n          <a\n            href=\"/\"\n            onClick={(e) => {\n              e.preventDefault();\n              toggleMode();\n            }}\n            >\n            Close\n          </a>\n          <input value={name} onChange={(e) => setName(e.target.value)}/>\n          <button onClick={handleAddNote}>Add new note</button>\n        </div>\n        <div onClick={toggleMode} className=\"add-note-background\"></div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default AddNote","import React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport getNotesList from \"../helpers/getNotesList\";\nimport { ListNoteItem } from \"../helpers/interfaces\";\nimport AddNote from \"./AddNote\";\nimport { CSSTransition } from \"react-transition-group\";\n\nfunction SideBar() {\n  const [addMode, setAddMode] = useState(false);\n  const [notesList, setNotesList] = useState([]);\n  const [showNotesList, setShowNotesList] = useState(false);\n  const { noteId } = useParams();\n  useEffect(() => {\n    const list = getNotesList();\n    setNotesList(list);\n  }, [addMode]);\n\n  const toggleMode = () => setAddMode(!addMode);\n  return (\n    <>\n      <div\n        className=\"sidebar-toggle\"\n        onClick={() => setShowNotesList(!showNotesList)}\n      >\n        <span className=\"burger-line burger-line-1\"></span>\n        <span className=\"burger-line burger-line-1\"></span>\n        <span className=\"burger-line burger-line-1\"></span>\n      </div>\n      <CSSTransition\n        in={showNotesList}\n        timeout={200}\n        classNames=\"sidebar-wrapper\"\n      >\n        <div className=\"sidebar-wrapper\">\n          <div className=\"sidebar-container\">\n            <h1>Notes app</h1>\n            <a\n              href=\"/\"\n              onClick={(e) => {\n                e.preventDefault();\n                toggleMode();\n              }}\n            >\n              Add note\n            </a>\n            <div className=\"links-container\">\n              {notesList.map((item: ListNoteItem, index: number) => {\n                return (\n                  <Link\n                    key={index}\n                    to={`/${item.name}`}\n                    className={noteId === item.name ? \"active-item\" : \"\"}\n                  >\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </CSSTransition>\n      {addMode && <AddNote toggleMode={toggleMode} />}\n    </>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\n\nconst Error = () => {\n  return (\n    <div className=\"error-container\">\n        <h1>Nie znaleźono notatki</h1>\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { useState, useEffect } from \"react\";\n\nconst Empty = () => {\n  const [shown, setShown] = useState(false)\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShown(true)\n    }, 1000)\n  }, [])\n\n  return (\n    <div className=\"empty-container\">\n        <h1>Nie masz jeszcze żadnej notatki</h1>\n        <p className={`add-new-info${shown ? \" add-new-info--shown\" : \"\"}`}>← Wciśnij tutaj aby dodać nową notatkę</p>\n    </div>\n  );\n};\n\nexport default Empty;\n","import React, { useEffect, useState } from \"react\";\nimport NoteContainer from \"./components/NoteContainer\";\nimport SideBar from \"./components/SideBar\";\n\nimport { useParams, useHistory } from \"react-router-dom\";\nimport getNotesList from \"./helpers/getNotesList\";\nimport Error from \"./components/Error\";\nimport { ListNoteItem } from \"./helpers/interfaces\";\nimport Empty from \"./components/Empty\";\n\nfunction Home() {\n  const [isError, setIsError] = useState(false)\n  const [isEmpty, setIsEmpty] = useState(false)\n  const { noteId } = useParams()\n  const { push } = useHistory()\n\n  useEffect(() => {\n    document.title = noteId || \"notes\"\n    const list = getNotesList()\n    \n    if(!list || list.length === 0) {\n      setIsEmpty(true)\n    } else {     \n      setIsEmpty(false) \n      if(!noteId && list.length > 0) {\n        push(`/${list[0].name}`)\n      }\n      \n      if(list.some((item: ListNoteItem) => item.name === noteId)) {\n        setIsError(false)\n      } else {\n        setIsError(true)\n      }\n    }\n  }, [noteId, push])\n\n  return (\n    <div className=\"home-container\">\n      <SideBar />\n      {!isError && !isEmpty && <NoteContainer key={noteId} noteId={noteId} />}\n      {!isError && isEmpty && <Empty />}\n      {isError && !isEmpty && <Error />}\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Home from \"./Home\";\n\nexport default function App() {\n  return (\n    <Router basename=\"/\">\n      <div>\n        <Switch>\n          <Route path=\"/:noteId\" children={<Home />} />\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './gh-markdown.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/mode/xml/xml.js';\nimport 'codemirror/mode/markdown/markdown.js';\nimport 'codemirror/mode/javascript/javascript.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}