{"version":3,"sources":["components/CodeBlock.tsx","helpers/getNotesList.tsx","components/Modal.tsx","components/NoteSettings.tsx","components/NoteContainer.tsx","components/AddNote.tsx","components/SideBar.tsx","components/Error.tsx","components/Empty.tsx","contexts/NotesProvider.tsx","Home.tsx","hooks/useNotes.ts","App.tsx","serviceWorker.ts","index.tsx","Cog_font_awesome.svg"],"names":["CodeBlock","value","language","getNotesList","rawList","localStorage","getItem","JSON","parse","modalRoot","document","getElementById","Modal","children","useEffect","classList","add","remove","ReactDOM","createPortal","NoteSettings","useState","showSettings","setShowSettings","noteId","useParams","push","useHistory","name","setName","toggleMode","state","className","onClick","src","Cog","alt","href","e","preventDefault","onChange","target","TYPING_MODE_KEY","newList","map","item","rawNote","console","log","oldNote","stringify","setItem","removeItem","alert","filter","generateKeySelection","cm","prefix","selection","getSelection","length","slice","replaceSelection","options","mode","autofocus","extraKeys","WrapCheckBox","props","markdown","setMarkdown","sourcePosition","checked","type","lineIndex","start","line","lines","split","find","replace","join","error","warn","NoteContainer","locaStorageTypingMode","initialType","typingMode","setTypingMode","setValue","noteName","setNoteName","renderers","listItem","code","onBeforeChange","editor","data","source","rawSourcePos","escapeHtml","AddNote","inputRef","useRef","current","focus","ref","list","SideBar","addMode","setAddMode","notesList","setNotesList","width","setWidth","showNotesList","setShowNotesList","sideBarRef","clientWidth","CSSTransition","in","timeout","classNames","style","index","key","to","Error","Empty","shown","setShown","setTimeout","NotesContext","createContext","notes","currentNote","NotesProvider","setNotes","setCurrentNote","Provider","Home","isError","setIsError","isEmpty","setIsEmpty","useContext","title","some","App","basename","path","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.88dbe36a.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nimport Highlight from 'react-highlight.js';\n\ninterface Props {\n  value: string;\n  language: string;\n}\n\nconst CodeBlock: FC<Props> = ({ value, language }) => {\n  return <Highlight language={language}>{value}</Highlight>;\n};\n\nexport default CodeBlock;\n","export const NOTE_LIST_KEY = 'note_lists';\n\nconst getNotesList = () => {\n  const rawList = localStorage.getItem(NOTE_LIST_KEY) || '[]';\n  const list = JSON.parse(rawList);\n\n  return list;\n};\n\nexport default getNotesList;\n","import { FC, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst modalRoot = document.getElementById('modal-root') as HTMLElement;\n\nexport type ModalProps = {\n  children: React.ReactNode;\n};\n\nexport const Modal: FC<ModalProps> = ({ children }) => {\n  useEffect(() => {\n    modalRoot.classList.add('shown');\n\n    return () => {\n      modalRoot.classList.remove('shown');\n    };\n  }, []);\n\n  return ReactDOM.createPortal(children, modalRoot);\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Cog from '../Cog_font_awesome.svg';\nimport getNotesList, { NOTE_LIST_KEY } from '../helpers/getNotesList';\nimport { ListNoteItem } from '../helpers/interfaces';\nimport { Modal } from './Modal';\nimport { TYPING_MODE_KEY } from './NoteContainer';\n\nconst NoteSettings: FC = () => {\n  const [showSettings, setShowSettings] = useState(false);\n  const { noteId } = useParams();\n  const { push } = useHistory();\n  const [name, setName] = useState(noteId);\n\n  useEffect(() => {\n    setName(noteId);\n  }, [noteId]);\n\n  // const handleDeleteNote = () => alert('Deleting note is not supported');\n\n  const toggleMode = () => {\n    setShowSettings(state => !state);\n  };\n\n  const handleEditNote = () => {\n    if (!name) {\n      toggleMode();\n      return;\n    }\n\n    if (name === NOTE_LIST_KEY || name === TYPING_MODE_KEY) {\n      alert('this name is not allowed');\n      return;\n    }\n    const list = getNotesList();\n\n    const newList = list.map((item: ListNoteItem) => {\n      if (item.name === noteId) {\n        return { name };\n      }\n      return item;\n    });\n    const rawNote = localStorage.getItem(noteId);\n\n    console.log('newList', newList, rawNote);\n\n    if (rawNote) {\n      const oldNote = JSON.parse(rawNote);\n      const value = JSON.stringify({\n        name,\n        value: oldNote?.value,\n      });\n\n      localStorage.setItem(name, value);\n      localStorage.setItem(NOTE_LIST_KEY, JSON.stringify(newList));\n      toggleMode();\n    }\n    push(`/${name}`);\n    localStorage.removeItem(noteId);\n  };\n  const handleDeleteNote = () => {\n    const list = getNotesList();\n\n    const newList = list.filter((item: ListNoteItem) => item.name !== noteId);\n\n    localStorage.setItem(NOTE_LIST_KEY, JSON.stringify(newList));\n    push(`/${newList[0]?.name ?? ''}`);\n    localStorage.removeItem(noteId);\n  };\n\n  return (\n    <>\n      <div className=\"note-settings\" onClick={toggleMode}>\n        <img src={Cog} alt=\"React Logo\" className=\"cog-icon\" />\n      </div>\n      {showSettings && (\n        <Modal>\n          <div className=\"add-note-wrappper\">\n            <div className=\"add-note-container\">\n              <a\n                href=\"/\"\n                onClick={e => {\n                  e.preventDefault();\n                  toggleMode();\n                }}>\n                Close\n              </a>\n              <input value={name} onChange={e => setName(e.target.value)} />\n              <div className=\"mb\">\n                <button className=\"button\" onClick={handleEditNote}>\n                  Edit note name\n                </button>\n              </div>\n              <button\n                className=\"button button-danger\"\n                onClick={handleDeleteNote}>\n                Delete note\n              </button>\n            </div>\n            <div onClick={toggleMode} className=\"add-note-background\"></div>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default NoteSettings;\n","import React, { FC, useState, useEffect } from 'react';\nimport { Controlled as CodeMirror } from 'react-codemirror2';\nimport ReactMarkdown from 'react-markdown/with-html';\n\nimport CodeBlock from './CodeBlock';\nimport NoteSettings from './NoteSettings';\n\nexport const TYPING_MODE_KEY = 'typing_mode';\n\ninterface Props {\n  noteId: string;\n}\n\nconst generateKeySelection = (cm: any, prefix: string) => {\n  const selection = cm.getSelection();\n\n  if (selection.length > 0) {\n    const match =\n      `${selection.slice(0, 2)}${selection.slice(-2)}` === prefix + prefix;\n    if (match) {\n      cm.replaceSelection(`${selection.slice(2).slice(0, -2)}`);\n    } else {\n      cm.replaceSelection(`${prefix}${selection}${prefix}`);\n    }\n  }\n};\n\nconst options = {\n  mode: 'markdown',\n  autofocus: true,\n  extraKeys: {\n    'Cmd-B': (cm: any) => generateKeySelection(cm, '**'),\n    'Cmd-I': (cm: any) => generateKeySelection(cm, '*'),\n  },\n};\n\nconst markdownChecked = '- [x]';\nconst markdownUnchecked = '- [ ]';\n\nconst WrapCheckBox = (props: any) => {\n  const { markdown, setMarkdown, sourcePosition, checked, children } = props;\n  const flipCheckBox = () => {\n    try {\n      const lineIndex = sourcePosition.start.line - 1;\n      const lines = markdown.split('\\n');\n      const find = checked ? markdownChecked : markdownUnchecked;\n      const replace = checked ? markdownUnchecked : markdownChecked;\n      console.log({ lineIndex, lines, find, replace });\n      lines[lineIndex] = lines[lineIndex].replace(find, replace);\n      setMarkdown(lines.join('\\n'));\n    } catch (error) {\n      console.warn('Error while filpin checkbox: ', error);\n    }\n  };\n  return (\n    <li>\n      <input type=\"checkbox\" checked={checked} onClick={flipCheckBox} />\n      {children}\n    </li>\n  );\n};\n\nconst NoteContainer: FC<Props> = ({ noteId }) => {\n  const locaStorageTypingMode = localStorage.getItem(TYPING_MODE_KEY);\n  const initialType =\n    locaStorageTypingMode === 'preview'\n      ? 'preview'\n      : locaStorageTypingMode === 'edit'\n      ? 'edit'\n      : 'both';\n\n  const [typingMode, setTypingMode] = useState<'preview' | 'edit' | 'both'>(\n    initialType,\n  );\n  const [value, setValue] = useState('');\n  const [noteName, setNoteName] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem(TYPING_MODE_KEY, typingMode);\n  }, [typingMode]);\n\n  useEffect(() => {\n    const rawNote = localStorage.getItem(noteId);\n    if (rawNote) {\n      setNoteName(JSON.parse(rawNote).name);\n      setValue(JSON.parse(rawNote).value);\n    }\n  }, [noteId]);\n\n  useEffect(() => {\n    if (noteId && value) {\n      localStorage.setItem(\n        noteId,\n        JSON.stringify({\n          name: noteName,\n          value,\n        }),\n      );\n    }\n  }, [value, noteId, noteName]);\n\n  const renderers = {\n    listItem: (props: any): any => {\n      const { children } = props;\n      if (typeof props.checked === 'boolean') {\n        const { checked, sourcePosition } = props;\n        return (\n          <WrapCheckBox\n            markdown={value}\n            setMarkdown={setValue}\n            checked={checked}\n            sourcePosition={sourcePosition}>\n            {children}\n          </WrapCheckBox>\n        );\n      }\n      return <li>{children}</li>;\n    },\n    code: CodeBlock,\n  };\n\n  return (\n    <div className=\"note\">\n      <NoteSettings />\n      <div\n        className={`note-wrapper${\n          typingMode === 'both' ? ' note-wrapper--both' : ''\n        }`}>\n        <div className=\"mode-buttons-container\">\n          <button\n            className={`mode-button${\n              typingMode === 'edit' ? ' mode-button-active' : ''\n            }`}\n            onClick={() => setTypingMode('edit')}>\n            Edit\n          </button>\n          <button\n            className={`mode-button${\n              typingMode === 'preview' ? ' mode-button-active' : ''\n            }`}\n            onClick={() => setTypingMode('preview')}>\n            Preview\n          </button>\n          <button\n            className={`mode-button${\n              typingMode === 'both' ? ' mode-button-active' : ''\n            }`}\n            onClick={() => setTypingMode('both')}>\n            Both\n          </button>\n        </div>\n        <h1 className=\"note-title\">{noteName}</h1>\n        <div className=\"note-container\">\n          {(typingMode === 'edit' || typingMode === 'both') && (\n            <div className=\"code-mirror-container\">\n              <CodeMirror\n                value={value}\n                options={options}\n                onBeforeChange={(editor, data, value) => {\n                  console.log('xd', editor);\n                  setValue(value);\n                }}\n              />\n            </div>\n          )}\n          {(typingMode === 'preview' || typingMode === 'both') && (\n            <div className=\"react-markdown-container markdown-body\">\n              <ReactMarkdown\n                renderers={renderers}\n                source={value}\n                rawSourcePos\n                escapeHtml={false}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NoteContainer;\n","import React, { FC, useEffect, useRef, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport getNotesList, { NOTE_LIST_KEY } from '../helpers/getNotesList';\nimport { ListNoteItem } from '../helpers/interfaces';\nimport { TYPING_MODE_KEY } from './NoteContainer';\nimport { Modal } from './Modal';\n\ninterface AddNoteProps {\n  toggleMode: () => void;\n}\n\nconst AddNote: FC<AddNoteProps> = ({ toggleMode }) => {\n  const { push } = useHistory();\n  const [name, setName] = useState('');\n  const inputRef = useRef<HTMLInputElement | null>();\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const handleAddNote = () => {\n    if (!name) {\n      toggleMode();\n      return;\n    }\n\n    if (name === NOTE_LIST_KEY || name === TYPING_MODE_KEY) {\n      alert('this name is not allowed');\n      return;\n    }\n    const list = getNotesList();\n    const newNote: ListNoteItem = {\n      name,\n    };\n    const newList = [newNote, ...list];\n    localStorage.setItem(\n      name,\n      JSON.stringify({\n        name,\n        value: '',\n      }),\n    );\n    localStorage.setItem(NOTE_LIST_KEY, JSON.stringify(newList));\n    push(`/${name}`);\n    toggleMode();\n  };\n\n  return (\n    <Modal>\n      <div className=\"add-note-wrappper\">\n        <div className=\"add-note-container\">\n          <a\n            href=\"/\"\n            onClick={e => {\n              e.preventDefault();\n              toggleMode();\n            }}>\n            Close\n          </a>\n          <input\n            ref={ref => (inputRef.current = ref)}\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n          <button className=\"button\" onClick={handleAddNote}>\n            Add new note\n          </button>\n        </div>\n        <div onClick={toggleMode} className=\"add-note-background\"></div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default AddNote;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport getNotesList from '../helpers/getNotesList';\nimport { ListNoteItem } from '../helpers/interfaces';\nimport AddNote from './AddNote';\nimport { CSSTransition } from 'react-transition-group';\n\nfunction SideBar() {\n  const [addMode, setAddMode] = useState(false);\n  const [notesList, setNotesList] = useState([]);\n  const [width, setWidth] = useState<number | 'auto'>('auto');\n  const [showNotesList, setShowNotesList] = useState(false);\n  const sideBarRef = useRef<HTMLDivElement>(null);\n\n  const { noteId } = useParams();\n  useEffect(() => {\n    const list = getNotesList();\n    setNotesList(list);\n  }, [addMode, noteId]);\n\n  useEffect(() => {\n    setWidth(sideBarRef?.current?.clientWidth ?? 'auto');\n  }, []);\n\n  const toggleMode = () => setAddMode(!addMode);\n  return (\n    <>\n      <div\n        className={`sidebar-toggle${\n          showNotesList ? ' sidebar-toggle--opened' : ''\n        }`}\n        onClick={() => setShowNotesList(!showNotesList)}>\n        <span className=\"burger-line burger-line-1\"></span>\n        <span className=\"burger-line burger-line-1\"></span>\n        <span className=\"burger-line burger-line-1\"></span>\n      </div>\n      <CSSTransition\n        in={showNotesList}\n        timeout={200}\n        classNames=\"sidebar-wrapper\">\n        <div className=\"sidebar-wrapper\" ref={sideBarRef}>\n          <div className=\"sidebar-container\" style={{ width }}>\n            <h1>Notes app</h1>\n            <a\n              href=\"/\"\n              onClick={e => {\n                e.preventDefault();\n                toggleMode();\n              }}>\n              Add note\n            </a>\n            <div className=\"links-container\">\n              {notesList.map((item: ListNoteItem, index: number) => {\n                return (\n                  <Link\n                    key={index}\n                    to={`/${item.name}`}\n                    className={noteId === item.name ? 'active-item' : ''}>\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </CSSTransition>\n      {addMode && <AddNote toggleMode={toggleMode} />}\n    </>\n  );\n}\n\nexport default SideBar;\n","import React from 'react';\n\nconst Error = () => {\n  return (\n    <div className=\"error-container\">\n      <h1>Nie znaleźono notatki</h1>\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { useState, useEffect } from 'react';\n\nconst Empty = () => {\n  const [shown, setShown] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShown(true);\n    }, 1000);\n  }, []);\n\n  return (\n    <div className=\"empty-container\">\n      <h1>You don't have any note</h1>\n      <p className={`add-new-info${shown ? ' add-new-info--shown' : ''}`}>\n        ← Click here to add one\n      </p>\n    </div>\n  );\n};\n\nexport default Empty;\n","import React, { createContext, ReactNode, useEffect, useState } from 'react';\nimport uuidv4 from '../helpers/uuid';\n\ninterface SingeNote {\n  id: string;\n  name: string;\n  value: string;\n}\n\ninterface NoteListItem {\n  name: string;\n  id: string;\n}\n\ninterface NotesContext {\n  notes: NoteListItem[];\n  currentNote: SingeNote | null;\n}\n\nexport const NotesContext = createContext<NotesContext>({\n  notes: [],\n  currentNote: null,\n});\n\ninterface Props {\n  children?: ReactNode;\n}\n\nexport function NotesProvider(props: Props) {\n  const [notes, setNotes] = useState<NoteListItem[]>([]);\n  const [currentNote, setCurrentNote] = useState<SingeNote | null>(null);\n\n  useEffect(() => {\n    console.log('dupaaaa');\n    setNotes([]);\n    setCurrentNote(null);\n  }, []);\n\n  const addNote = (noteName: string) => {};\n\n  const removeCurrentNote = () => {};\n\n  const editCurrentNote = () => {};\n\n  return (\n    <NotesContext.Provider\n      value={{\n        notes,\n        currentNote,\n      }}>\n      {props.children}\n    </NotesContext.Provider>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport NoteContainer from './components/NoteContainer';\nimport SideBar from './components/SideBar';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport getNotesList from './helpers/getNotesList';\nimport Error from './components/Error';\nimport { ListNoteItem } from './helpers/interfaces';\nimport Empty from './components/Empty';\nimport { useNotes } from './hooks/useNotes';\n\nfunction Home() {\n  const [isError, setIsError] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const { noteId } = useParams();\n\n  const { notes } = useNotes();\n  const { push } = useHistory();\n\n  console.log(notes);\n\n  useEffect(() => {\n    document.title = noteId || 'notes';\n    const list = getNotesList();\n\n    if (!list || list.length === 0) {\n      setIsEmpty(true);\n    } else {\n      setIsEmpty(false);\n      if (!noteId && list.length > 0) {\n        push(`/${list[0].name}`);\n      }\n\n      if (list.some((item: ListNoteItem) => item.name === noteId)) {\n        setIsError(false);\n      } else {\n        setIsError(true);\n      }\n    }\n  }, [noteId, push]);\n\n  return (\n    <div className=\"home-container\">\n      <SideBar />\n      {!isError && !isEmpty && <NoteContainer key={noteId} noteId={noteId} />}\n      {!isError && isEmpty && <Empty />}\n      {isError && !isEmpty && <Error />}\n    </div>\n  );\n}\n\nexport default Home;\n","import { useContext } from 'react';\nimport { NotesContext } from '../contexts/NotesProvider';\n\nexport const useNotes = () => useContext(NotesContext);\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './Home';\n\nexport default function App() {\n  return (\n    <Router basename=\"/\">\n      <div>\n        <Switch>\n          <Route path=\"/:noteId\" children={<Home />} />\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/gh-markdown.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/neat.css';\nimport 'codemirror/mode/xml/xml.js';\nimport 'codemirror/mode/markdown/markdown.js';\nimport 'codemirror/mode/javascript/javascript.js';\nimport { NotesProvider } from './contexts/NotesProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <NotesProvider>\n      <App />\n    </NotesProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Cog_font_awesome.69de4447.svg\";"],"sourceRoot":""}